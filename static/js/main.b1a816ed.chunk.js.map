{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","logo.svg","clouds.svg","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","className","type","name","placeholder","Weather","city","country","temp","temp_max","temp_min","pressure","sunset","error","MY_KEY","App","state","undefined","getWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunsetDate","getHours","getMinutes","getSeconds","setState","main","src","logo","alt","clouds","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PASeA,EAPF,kBACT,gCACI,2DACA,mECGOC,EANF,SAACC,GAAD,OACT,uBAAMC,SAAUD,EAAME,cAAtB,UACI,uBAAOC,UAAU,QAAQC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC7D,wBAAQH,UAAU,MAAlB,8BCiBOI,EApBC,SAACP,GAEb,OACQ,gCACMA,EAAMQ,MACR,gCACI,2CAAcR,EAAMQ,KAApB,KAA4BR,EAAMS,WAClC,8CAAiBT,EAAMU,KAAvB,YACA,kDAAqBV,EAAMW,SAA3B,YACA,kDAAqBX,EAAMY,SAA3B,YACA,2CAAcZ,EAAMa,YACpB,yCAAYb,EAAMc,aAGtB,4BAAId,EAAMe,YChBX,MAA0B,iCCA1B,MAA0B,mCCQnCC,G,MAAS,oCA4EAC,E,4MAxEbC,MAAQ,CACNR,UAAMS,EACNR,cAAUQ,EACVP,cAAUO,EACVX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAITC,W,uCAAa,WAAOC,GAAP,yBAAAC,EAAA,yDACXD,EAAEE,mBACEf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,OAFvB,iCAKaC,MAAM,oDAAD,OAAqDnB,EAArD,kBAAmEQ,EAAnE,kBALlB,cAKHY,EALG,gBAMUA,EAAQC,OANlB,OAMHC,EANG,OAOLhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EAAaH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aACxE,EAAKC,SAAS,CACZ7B,KAAMoB,EAAKU,KAAK9B,KAChBC,SAAUmB,EAAKU,KAAK7B,SACpBC,SAAUkB,EAAKU,KAAK5B,SACpBJ,KAAMsB,EAAKzB,KACXI,QAASqB,EAAKC,IAAItB,QAClBI,SAAUiB,EAAKU,KAAK3B,SACpBC,OAAQqB,EACRpB,WAAOI,IAnBA,wBAsBT,EAAKoB,SAAS,CACZ7B,UAAMS,EACNR,cAAUQ,EACVP,cAAUO,EACVX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,oBA9BA,4C,6GAmCX,OACE,qBAAKZ,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKsC,IAAKC,EAAMvC,UAAU,WAAWwC,IAAI,SACzC,qBAAKF,IAAKG,EAAQzC,UAAU,aAAawC,IAAI,YAE/C,cAAC,EAAD,IACA,cAAC,EAAD,CAAMzC,cAAe2C,KAAKzB,aAC1B,cAAC,EAAD,CACEV,KAAMmC,KAAK3B,MAAMR,KACjBC,SAAUkC,KAAK3B,MAAMP,SACrBC,SAAUiC,KAAK3B,MAAMN,SACrBJ,KAAMqC,KAAK3B,MAAMV,KACjBC,QAASoC,KAAK3B,MAAMT,QACpBI,SAAUgC,KAAK3B,MAAML,SACrBC,OAAQ+B,KAAK3B,MAAMJ,OACnBC,MAAO8B,KAAK3B,MAAMH,iB,GAlEZ+B,IAAMC,WCETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b1a816ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>RRReactive Weather-app :)</h2>\r\n        <p>Weather forecast in your city!</p>\r\n     </div>\r\n);\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input className=\"input\" type='text' name='city' placeholder='City' />\r\n        <button className=\"btn\">Get Weather!</button>\r\n    </form>\r\n);\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    \r\n    return (\r\n            <div>\r\n                { props.city &&\r\n                <div>\r\n                    <p>Location: {props.city}, {props.country}</p>\r\n                    <p>Temperature: {props.temp}℃</p>\r\n                    <p>Max-temperature: {props.temp_max}℃</p>\r\n                    <p>Min-temperature: {props.temp_min}℃</p>\r\n                    <p>Pressure: {props.pressure}</p>\r\n                    <p>Sunset: {props.sunset}</p>\r\n                </div>\r\n                }  \r\n                <p>{props.error}</p>\r\n           </div>\r\n           \r\n    );\r\n}\r\n\r\nexport default Weather;","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","export default __webpack_public_path__ + \"static/media/clouds.051c1340.svg\";","import React from 'react';\r\nimport Info from './components/info';\r\nimport Form from './components/form';\r\nimport Weather from './components/weather';\r\n// import Example from './components/weather';\r\nimport logo from './logo.svg';\r\nimport clouds from './clouds.svg';\r\nimport './App.css';\r\nconst MY_KEY = 'bda543e5629a98642aa8195f41ad407b';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    temp_max: undefined,\r\n    temp_min: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    pressure: undefined,\r\n    sunset: undefined,\r\n    error: undefined\r\n  }\r\n\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    let city = e.target.elements.city.value;\r\n    \r\n    if(city) {\r\n      const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${MY_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n      let sunset = data.sys.sunset;\r\n      let date = new Date();\r\n      date.setTime(sunset);\r\n      let sunsetDate = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n      this.setState({\r\n        temp: data.main.temp,\r\n        temp_max: data.main.temp_max,\r\n        temp_min: data.main.temp_min,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        pressure: data.main.pressure,\r\n        sunset: sunsetDate,\r\n        error: undefined\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        temp_max: undefined,\r\n        temp_min: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: 'Enter your city'\r\n      });\r\n    }\r\n  }  \r\n  render() {\r\n    return(\r\n      <div className=\"App\">\r\n        <div className=\"App-container\">\r\n          <div className=\"App-pictures\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <img src={clouds} className=\"App-clouds\" alt=\"logo\" />\r\n          </div>\r\n          <Info />\r\n          <Form weatherMethod={this.getWeather} />\r\n          <Weather \r\n            temp={this.state.temp}\r\n            temp_max={this.state.temp_max}\r\n            temp_min={this.state.temp_min}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            pressure={this.state.pressure}\r\n            sunset={this.state.sunset}\r\n            error={this.state.error}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}